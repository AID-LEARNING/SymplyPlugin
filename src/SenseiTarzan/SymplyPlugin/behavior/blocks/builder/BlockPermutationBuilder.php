<?php

/*
 *
 *  _____                       _
 * /  ___|                     | |
 * \ `--. _   _ _ __ ___  _ __ | |_   _
 *  `--. \ | | | '_ ` _ \| '_ \| | | | |
 * /\__/ / |_| | | | | | | |_) | | |_| |
 * \____/ \__, |_| |_| |_| .__/|_|\__, |
 *         __/ |         | |       __/ |
 *        |___/          |_|      |___/
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * @author Symply Team
 * @link http://www.symplymc.com/
 *
 *
 */

declare(strict_types=1);

namespace SenseiTarzan\SymplyPlugin\behavior\blocks\builder;

use Generator;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\nbt\tag\ListTag;
use pocketmine\network\mcpe\convert\BlockStateDictionaryEntry;
use SenseiTarzan\SymplyPlugin\behavior\blocks\permutation\Permutations;
use SenseiTarzan\SymplyPlugin\behavior\blocks\property\BlockProperty;
use SenseiTarzan\SymplyPlugin\utils\Utils;
use function array_map;
use function array_reverse;
use function in_array;

final class BlockPermutationBuilder extends BlockBuilder{

	/** @var BlockProperty[] */
	private array $properties = [];

	/** @var Permutations[] */
	private array $permutations = [];

	/**
	 *
	 * @param BlockProperty[] $properties
	 */
	public function setProperties(array $properties) : self
	{
		$this->properties = $properties;
		return $this;
	}

	/**
	 *
	 * @param BlockProperty $property
	 * @return $this
	 */
	public function addProperty(BlockProperty $property) : self
	{
		if (array_key_exists($property->getName(), $this->properties)){
			return $this;
		}
		$this->properties[$property->getName()] = $property;
		return $this;
	}

	/**
	 *
	 * @return BlockProperty[]
	 */
	public function getProperties() : array
	{
		return $this->properties;
	}

	/**
	 *
	 * Permet de mettre
	 * @param Permutations $permutation
	 * @return $this
	 */
	public function addPermutation(Permutations $permutation) : self
	{
		$this->permutations[] = $permutation;
		return $this;
	}

	/**
	 *
	 * @return Permutations[]
	 */
	private function getPermutations() : array
	{
		return $this->permutations;
	}

	public function getComponentsTag() : CompoundTag
	{
		return parent::getComponentsTag()->setTag("minecraft:on_player_placing", CompoundTag::create());
	}

	public function getPropertiesTag() : CompoundTag
	{
		return parent::getPropertiesTag()
			->setTag("permutations", new ListTag(array_map(fn(Permutations $permutation) => $permutation->toNBT(), $this->getPermutations())))
			->setTag("properties", new ListTag(array_reverse(array_map(fn(BlockProperty $property) => $property->toNBT(), array_values($this->getProperties())))));// TODO: Change the autogenerated stub
	}

	public function toBlockStateDictionaryEntry() : Generator
	{
		$properties = $this->getProperties();
		if (empty($properties)) {
			return parent::toBlockStateDictionaryEntry();
		}
		$listBlockPropertyName = array_keys($properties);
		foreach (Utils::getCartesianProduct(array_map(fn(BlockProperty $property) => $property->getValueInRaw(), array_values($properties))) as $meta => $property) {
			$states = [];
			foreach ($property as $i => $data) {
				$states[$listBlockPropertyName[$i]] = $data;
			}
			yield new BlockStateDictionaryEntry($this->getNamespaceId(), $states, $meta);
		}
	}
}